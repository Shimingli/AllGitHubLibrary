<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="JUnitGeneratorProjectSettings">
    <option name="outputFilePattern" value="${SOURCEPATH}/../../test/java/${PACKAGE}/${FILENAME}" />
    <option name="selectedTemplateKey" value="JUnit 4" />
    <option name="vmTemplates">
      <map>
        <entry key="JUnit 3" value="" />
        <entry key="JUnit 4" value="########################################################################################&#10;##&#10;## Available variables:&#10;##         $entryList.methodList - List of method composites&#10;##         $entryList.privateMethodList - List of private method composites&#10;##         $entryList.fieldList - ArrayList of class scope field names&#10;##         $entryList.className - class name&#10;##         $entryList.packageName - package name&#10;##         $today - Todays date in MM/dd/yyyy format&#10;##&#10;##            MethodComposite variables:&#10;##                $method.name - Method Name&#10;##                $method.signature - Full method signature in String form&#10;##                $method.reflectionCode - list of strings representing commented out reflection code to access method (Private Methods)&#10;##                $method.paramNames - List of Strings representing the method's parameters' names&#10;##                $method.paramClasses - List of Strings representing the method's parameters' classes&#10;##&#10;## You can configure the output class name using &quot;testClass&quot; variable below.&#10;## Here are some examples:&#10;## Test${entry.ClassName} - will produce TestSomeClass&#10;## ${entry.className}Test - will produce SomeClassTest&#10;##&#10;########################################################################################&#10;##&#10;#macro (cap $strIn)$strIn.valueOf($strIn.charAt(0)).toUpperCase()$strIn.substring(1)#end&#10;#macro (cap2 $strIn)$strIn.valueOf($strIn.charAt(0)).toLowerCase()$strIn.substring(1)#end&#10;#macro (cap3 $strIn)$strIn.substring(0,$strIn.indexOf(&quot;Impl&quot;))#end&#10;#macro (cap4 $strIn)$strIn.valueOf($strIn.charAt(0)).toLowerCase()$strIn.substring(1,$strIn.indexOf(&quot;Impl&quot;))#end&#10;#macro (cap5 $strIn)$strIn.indexOf(&quot;Impl&quot;)#end&#10;#macro (cap6 $strIn)$strIn.indexOf(&quot;Controller&quot;)#end&#10; &#10;## Iterate through the list and generate testcase for every entry.&#10;#foreach ($entry in $entryList)&#10;#set( $testClass=&quot;${entry.className}Test&quot;)&#10; &#10;##&#10;package $entry.packageName;&#10; &#10;import org.junit.Test;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10; &#10;/**&#10; * ${entry.className} Tester.&#10; *&#10; * @author shiming&#10; * @version 1.0&#10;## * @since &lt;pre&gt;$today&lt;/pre&gt;&#10; */&#10;public class $testClass extends #if($testClass.indexOf(&quot;Controller&quot;) &gt; 0) BaseCoreWebTest #else BaseCoreTest #end{&#10;     &#10;    #if($testClass.indexOf(&quot;Impl&quot;) &gt; 0)&#10;    @Autowired&#10;    private #cap3(${entry.className}) #cap4(${entry.className});&#10;    #else&#10;    @Autowired&#10;    private ${entry.className} #cap2(${entry.className});&#10;    #end&#10;    &#10;    #foreach($method in $entry.methodList)&#10;    /**&#10;     * Method: $method.signature&#10;     */&#10;    @Test&#10;    public void test#cap(${method.name})() throws Exception {&#10;        //TODO: Test goes here...&#10;    }&#10;    #end&#10;}&#10;#end" />
      </map>
    </option>
  </component>
</project>